// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:Signs/data/remote/appointment/speciality/models/hospital_specialities_entity.dart';
import 'package:Signs/generated/json/hospital_specialities_entity_helper.dart';
import 'package:Signs/data/remote/appointment/doctors/models/doctor_details_entity.dart';
import 'package:Signs/generated/json/doctor_details_entity_helper.dart';
import 'package:Signs/data/remote/appointment/doctors/models/doctors_entity.dart';
import 'package:Signs/generated/json/doctors_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case HospitalSpecialitiesEntity:
				return hospitalSpecialitiesEntityFromJson(data as HospitalSpecialitiesEntity, json) as T;
			case HospitalSpecialitiesData:
				return hospitalSpecialitiesDataFromJson(data as HospitalSpecialitiesData, json) as T;
			case DoctorDetailsEntity:
				return doctorDetailsEntityFromJson(data as DoctorDetailsEntity, json) as T;
			case DoctorDetails:
				return doctorDetailsFromJson(data as DoctorDetails, json) as T;
			case DoctorsEntity:
				return doctorsEntityFromJson(data as DoctorsEntity, json) as T;
			case Doctor:
				return doctorFromJson(data as Doctor, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case HospitalSpecialitiesEntity:
				return hospitalSpecialitiesEntityToJson(data as HospitalSpecialitiesEntity);
			case HospitalSpecialitiesData:
				return hospitalSpecialitiesDataToJson(data as HospitalSpecialitiesData);
			case DoctorDetailsEntity:
				return doctorDetailsEntityToJson(data as DoctorDetailsEntity);
			case DoctorDetails:
				return doctorDetailsToJson(data as DoctorDetails);
			case DoctorsEntity:
				return doctorsEntityToJson(data as DoctorsEntity);
			case Doctor:
				return doctorToJson(data as Doctor);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (HospitalSpecialitiesEntity).toString()){
			return HospitalSpecialitiesEntity().fromJson(json);
		}	else if(type == (HospitalSpecialitiesData).toString()){
			return HospitalSpecialitiesData().fromJson(json);
		}	else if(type == (DoctorDetailsEntity).toString()){
			return DoctorDetailsEntity().fromJson(json);
		}	else if(type == (DoctorDetails).toString()){
			return DoctorDetails().fromJson(json);
		}	else if(type == (DoctorsEntity).toString()){
			return DoctorsEntity().fromJson(json);
		}	else if(type == (Doctor).toString()){
			return Doctor().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<HospitalSpecialitiesEntity>[] is M){
			return data.map<HospitalSpecialitiesEntity>((e) => HospitalSpecialitiesEntity().fromJson(e)).toList() as M;
		}	else if(<HospitalSpecialitiesData>[] is M){
			return data.map<HospitalSpecialitiesData>((e) => HospitalSpecialitiesData().fromJson(e)).toList() as M;
		}	else if(<DoctorDetailsEntity>[] is M){
			return data.map<DoctorDetailsEntity>((e) => DoctorDetailsEntity().fromJson(e)).toList() as M;
		}	else if(<DoctorDetails>[] is M){
			return data.map<DoctorDetails>((e) => DoctorDetails().fromJson(e)).toList() as M;
		}	else if(<DoctorsEntity>[] is M){
			return data.map<DoctorsEntity>((e) => DoctorsEntity().fromJson(e)).toList() as M;
		}	else if(<Doctor>[] is M){
			return data.map<Doctor>((e) => Doctor().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}