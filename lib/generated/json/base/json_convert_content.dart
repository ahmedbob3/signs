// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:Signs/data/remote/appointment/models/appointment_response_entity.dart';
import 'package:Signs/generated/json/appointment_response_entity_helper.dart';
import 'package:Signs/data/remote/appointment/reservation/models/insurance_card_entity.dart';
import 'package:Signs/generated/json/insurance_card_entity_helper.dart';
import 'package:Signs/data/remote/appointment/speciality/models/hospital_specialities_entity.dart';
import 'package:Signs/generated/json/hospital_specialities_entity_helper.dart';
import 'package:Signs/data/remote/appointment/doctors/models/doctor_details_entity.dart';
import 'package:Signs/generated/json/doctor_details_entity_helper.dart';
import 'package:Signs/data/remote/appointment/doctors/models/doctors_entity.dart';
import 'package:Signs/generated/json/doctors_entity_helper.dart';
import 'package:Signs/data/remote/appointment/reservation/models/doctor_time_slots_entity.dart';
import 'package:Signs/generated/json/doctor_time_slots_entity_helper.dart';
import 'package:Signs/data/remote/appointment/hospital/models/banners_response_entity.dart';
import 'package:Signs/generated/json/banners_response_entity_helper.dart';
import 'package:Signs/data/remote/appointment/reservation/models/patient_cards_entity.dart';
import 'package:Signs/generated/json/patient_cards_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case AppointmentResponseEntity:
				return appointmentResponseEntityFromJson(data as AppointmentResponseEntity, json) as T;
			case AppointmentResponseData:
				return appointmentResponseDataFromJson(data as AppointmentResponseData, json) as T;
			case InsuranceCardEntity:
				return insuranceCardEntityFromJson(data as InsuranceCardEntity, json) as T;
			case InsuranceCardData:
				return insuranceCardDataFromJson(data as InsuranceCardData, json) as T;
			case HospitalSpecialitiesEntity:
				return hospitalSpecialitiesEntityFromJson(data as HospitalSpecialitiesEntity, json) as T;
			case HospitalSpeciality:
				return hospitalSpecialityFromJson(data as HospitalSpeciality, json) as T;
			case DoctorDetailsEntity:
				return doctorDetailsEntityFromJson(data as DoctorDetailsEntity, json) as T;
			case DoctorDetails:
				return doctorDetailsFromJson(data as DoctorDetails, json) as T;
			case DoctorsEntity:
				return doctorsEntityFromJson(data as DoctorsEntity, json) as T;
			case Doctor:
				return doctorFromJson(data as Doctor, json) as T;
			case DoctorTimeSlotsEntity:
				return doctorTimeSlotsEntityFromJson(data as DoctorTimeSlotsEntity, json) as T;
			case DoctorTimeSlot:
				return doctorTimeSlotFromJson(data as DoctorTimeSlot, json) as T;
			case BannersResponseEntity:
				return bannersResponseEntityFromJson(data as BannersResponseEntity, json) as T;
			case Banners:
				return bannersFromJson(data as Banners, json) as T;
			case PatientCardsEntity:
				return patientCardsEntityFromJson(data as PatientCardsEntity, json) as T;
			case PatientCardsData:
				return patientCardsDataFromJson(data as PatientCardsData, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case AppointmentResponseEntity:
				return appointmentResponseEntityToJson(data as AppointmentResponseEntity);
			case AppointmentResponseData:
				return appointmentResponseDataToJson(data as AppointmentResponseData);
			case InsuranceCardEntity:
				return insuranceCardEntityToJson(data as InsuranceCardEntity);
			case InsuranceCardData:
				return insuranceCardDataToJson(data as InsuranceCardData);
			case HospitalSpecialitiesEntity:
				return hospitalSpecialitiesEntityToJson(data as HospitalSpecialitiesEntity);
			case HospitalSpeciality:
				return hospitalSpecialityToJson(data as HospitalSpeciality);
			case DoctorDetailsEntity:
				return doctorDetailsEntityToJson(data as DoctorDetailsEntity);
			case DoctorDetails:
				return doctorDetailsToJson(data as DoctorDetails);
			case DoctorsEntity:
				return doctorsEntityToJson(data as DoctorsEntity);
			case Doctor:
				return doctorToJson(data as Doctor);
			case DoctorTimeSlotsEntity:
				return doctorTimeSlotsEntityToJson(data as DoctorTimeSlotsEntity);
			case DoctorTimeSlot:
				return doctorTimeSlotToJson(data as DoctorTimeSlot);
			case BannersResponseEntity:
				return bannersResponseEntityToJson(data as BannersResponseEntity);
			case Banners:
				return bannersToJson(data as Banners);
			case PatientCardsEntity:
				return patientCardsEntityToJson(data as PatientCardsEntity);
			case PatientCardsData:
				return patientCardsDataToJson(data as PatientCardsData);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (AppointmentResponseEntity).toString()){
			return AppointmentResponseEntity().fromJson(json);
		}	else if(type == (AppointmentResponseData).toString()){
			return AppointmentResponseData().fromJson(json);
		}	else if(type == (InsuranceCardEntity).toString()){
			return InsuranceCardEntity().fromJson(json);
		}	else if(type == (InsuranceCardData).toString()){
			return InsuranceCardData().fromJson(json);
		}	else if(type == (HospitalSpecialitiesEntity).toString()){
			return HospitalSpecialitiesEntity().fromJson(json);
		}	else if(type == (HospitalSpeciality).toString()){
			return HospitalSpeciality().fromJson(json);
		}	else if(type == (DoctorDetailsEntity).toString()){
			return DoctorDetailsEntity().fromJson(json);
		}	else if(type == (DoctorDetails).toString()){
			return DoctorDetails().fromJson(json);
		}	else if(type == (DoctorsEntity).toString()){
			return DoctorsEntity().fromJson(json);
		}	else if(type == (Doctor).toString()){
			return Doctor().fromJson(json);
		}	else if(type == (DoctorTimeSlotsEntity).toString()){
			return DoctorTimeSlotsEntity().fromJson(json);
		}	else if(type == (DoctorTimeSlot).toString()){
			return DoctorTimeSlot().fromJson(json);
		}	else if(type == (BannersResponseEntity).toString()){
			return BannersResponseEntity().fromJson(json);
		}	else if(type == (Banners).toString()){
			return Banners().fromJson(json);
		}	else if(type == (PatientCardsEntity).toString()){
			return PatientCardsEntity().fromJson(json);
		}	else if(type == (PatientCardsData).toString()){
			return PatientCardsData().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<AppointmentResponseEntity>[] is M){
			return data.map<AppointmentResponseEntity>((e) => AppointmentResponseEntity().fromJson(e)).toList() as M;
		}	else if(<AppointmentResponseData>[] is M){
			return data.map<AppointmentResponseData>((e) => AppointmentResponseData().fromJson(e)).toList() as M;
		}	else if(<InsuranceCardEntity>[] is M){
			return data.map<InsuranceCardEntity>((e) => InsuranceCardEntity().fromJson(e)).toList() as M;
		}	else if(<InsuranceCardData>[] is M){
			return data.map<InsuranceCardData>((e) => InsuranceCardData().fromJson(e)).toList() as M;
		}	else if(<HospitalSpecialitiesEntity>[] is M){
			return data.map<HospitalSpecialitiesEntity>((e) => HospitalSpecialitiesEntity().fromJson(e)).toList() as M;
		}	else if(<HospitalSpeciality>[] is M){
			return data.map<HospitalSpeciality>((e) => HospitalSpeciality().fromJson(e)).toList() as M;
		}	else if(<DoctorDetailsEntity>[] is M){
			return data.map<DoctorDetailsEntity>((e) => DoctorDetailsEntity().fromJson(e)).toList() as M;
		}	else if(<DoctorDetails>[] is M){
			return data.map<DoctorDetails>((e) => DoctorDetails().fromJson(e)).toList() as M;
		}	else if(<DoctorsEntity>[] is M){
			return data.map<DoctorsEntity>((e) => DoctorsEntity().fromJson(e)).toList() as M;
		}	else if(<Doctor>[] is M){
			return data.map<Doctor>((e) => Doctor().fromJson(e)).toList() as M;
		}	else if(<DoctorTimeSlotsEntity>[] is M){
			return data.map<DoctorTimeSlotsEntity>((e) => DoctorTimeSlotsEntity().fromJson(e)).toList() as M;
		}	else if(<DoctorTimeSlot>[] is M){
			return data.map<DoctorTimeSlot>((e) => DoctorTimeSlot().fromJson(e)).toList() as M;
		}	else if(<BannersResponseEntity>[] is M){
			return data.map<BannersResponseEntity>((e) => BannersResponseEntity().fromJson(e)).toList() as M;
		}	else if(<Banners>[] is M){
			return data.map<Banners>((e) => Banners().fromJson(e)).toList() as M;
		}	else if(<PatientCardsEntity>[] is M){
			return data.map<PatientCardsEntity>((e) => PatientCardsEntity().fromJson(e)).toList() as M;
		}	else if(<PatientCardsData>[] is M){
			return data.map<PatientCardsData>((e) => PatientCardsData().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}